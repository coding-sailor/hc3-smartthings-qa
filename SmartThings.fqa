{"name":"SmartThings","type":"com.fibaro.genericDevice","apiVersion":"1.3","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_277"},"sections":{"items":[]}},"head":{"title":"quickApp_device_277"}}},"uiView":[],"useUiView":true,"uiCallbacks":[],"quickAppVariables":[{"name":"refreshToken","type":"string","value":""},{"name":"clientId","type":"string","value":""},{"name":"clientSecret","type":"string","value":""}],"typeTemplateInitialized":true,"userDescription":""},"initialInterfaces":[],"files":[{"name":"main","isMain":true,"isOpen":true,"content":"QuickApp._trace,TRACE = QuickApp.trace,false\nfunction QuickApp.trace(...) if TRACE then QuickApp._trace(...) end end\n\nfunction QuickApp:onInit()\n    self:debug(\"SmartThings QuickApp starting...\")\n\n    local clientId = self:getVariable(\"clientId\")\n    local clientSecret = self:getVariable(\"clientSecret\")\n    local refreshToken = self:getVariable(\"refreshToken\")\n    \n    -- Add debugging to check if variables are loaded\n    self:debug(\"ClientId: \" .. (clientId ~=\"\" and clientId or \"NOT SET\"))\n    self:debug(\"ClientSecret: \" .. (clientSecret ~= \"\" and \"SET\" or \"NOT SET\"))\n    self:debug(\"RefreshToken: \" .. (refreshToken ~= \"\" and \"SET\" or \"NOT SET\"))\n    \n    if clientId == \"\" or clientSecret == \"\" or refreshToken == \"\" then\n        self:error(\"Missing required variables. Please check clientId, clientSecret, and refreshToken are set.\")\n        return\n    end\n    \n    self.client = SmartThingsClient:new(clientId, clientSecret, refreshToken, function(token) self:setVariable(\"refreshToken\", token) end)\n    \n    -- Load existing children\n    self:initChildDevices({\n        [\"com.fibaro.hvacSystemCool\"] = ACDevice\n    })\n\n    self.client:refreshAccessToken(function()\n        self.client:listDevices(function(data) self:processDiscoveredDevices(data) end)\n    end)\nend\n\nfunction QuickApp:processDiscoveredDevices(devices)\n    self:debug(\"Processing \" .. #devices .. \" discovered devices\")\n\n    for _, device in ipairs(devices) do\n        -- Check if device is an AC unit (has airConditionerMode capability)\n        if self:isACDevice(device) then\n            local existingChild = self:findChildByDeviceId(device.deviceId)\n            if not existingChild then\n                local childId = self:createChildDevice({\n                    name = device.label,\n                    type = \"com.fibaro.hvacSystemCool\",\n                    initialProperties = {\n                        uiView = ACDevice.getUI(),\n                        quickAppVariables = {\n                            {name = \"deviceId\", value = device.deviceId},\n                            {name = \"pollInterval\", value = 60}\n                        }\n                    },\n                }, ACDevice)\n            else\n                self:debug(\"AC device already exists: \" .. device.label)\n            end\n        else\n            self:debug(\"Device not supported: \" .. device.label)\n        end\n    end\nend\n\nfunction QuickApp:isACDevice(device)\n    if not device.components then return false end\n\n    for _, component in ipairs(device.components) do\n        if component.capabilities then\n            for _, capability in ipairs(component.capabilities) do\n                if capability.id == \"airConditionerMode\" then\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n\nfunction QuickApp:findChildByDeviceId(deviceId)\n    for _, child in pairs(self.childDevices) do\n        if child.deviceId == deviceId then\n            return child\n        end\n    end\n    return nil\nend\n\nfunction QuickApp:UIHandler(ev)\n  local child = self.childDevices[ev.deviceId] or nil\n  if type(child) == nil then\n    self:error(\"Child device not found: \" .. ev.deviceId)\n    return\n  end\n\n  local callback = child.uiCallbacks[ev.elementName][ev.eventType] or \"\"\n  if callback ~= \"\" then\n    child:callAction(callback, ev)\n  end\nend"},{"name":"client","isMain":false,"isOpen":false,"content":"class 'SmartThingsClient'\r\n\r\nfunction SmartThingsClient:new(clientId, clientSecret, refreshToken, refreshCallback)\r\n    self.clientId = clientId\r\n    self.clientSecret = clientSecret\r\n    self.refreshToken = refreshToken\r\n    self.refreshCallback = refreshCallback\r\n    self.baseUrl = \"https://api.smartthings.com\"\r\n    self.accessToken = \"\"\r\n    self.http = net.HTTPClient({ timeout = 10000 })\r\n    return self\r\nend\r\n\r\nfunction SmartThingsClient:listDevices(callback)\r\n    local headers = {\r\n        ['Authorization'] = 'Bearer ' .. self.accessToken,\r\n        [\"Content-Type\"] = \"application/json\"\r\n    }\r\n    \r\n    self:httpGet(\"/v1/devices\", headers, function(response)\r\n        if response.status == 200 then\r\n            local data = json.decode(response.data)\r\n            callback(data.items)\r\n        else\r\n            QuickApp:error(\"Failed to list devices. Status: \" .. response.status .. \" Response: \" .. tostring(response.data))\r\n        end\r\n    end)\r\nend\r\n\r\nfunction SmartThingsClient:getDeviceStatus(deviceId, callback)\r\n    local headers = {\r\n        ['Authorization'] = 'Bearer ' .. self.accessToken,\r\n        [\"Content-Type\"] = \"application/json\"\r\n    }\r\n    \r\n    self:httpGet(\"/v1/devices/\" .. deviceId .. \"/status\", headers, function(response)\r\n        if response.status == 200 then\r\n            local data = json.decode(response.data)\r\n            callback(data)\r\n        else\r\n            QuickApp:error(\"Failed to get device status. Status: \" .. response.status .. \" Response: \" .. tostring(response.data))\r\n        end\r\n    end)\r\nend\r\n\r\nfunction SmartThingsClient:executeCommandsOnDevice(deviceId, commands)\r\n    local headers = {\r\n        ['Authorization'] = 'Bearer ' .. self.accessToken,\r\n        [\"Content-Type\"] = \"application/json\"\r\n    }\r\n    local data = json.encode({commands = commands})\r\n    \r\n    self:httpPost(\"/v1/devices/\" .. deviceId .. \"/commands\", data, headers, function(response)\r\n        if response.status == 200 then\r\n            QuickApp:trace(\"Commands executed successfully. Status: \" .. response.status .. \" Data: \" .. response.data)\r\n        else\r\n            QuickApp:error(\"Failed to execute commands. Status: \" .. response.status .. \" Response: \" .. tostring(response.data))\r\n        end\r\n    end)\r\nend\r\n\r\nfunction SmartThingsClient:refreshAccessToken(callback)\r\n    local credentials = base64Encode(self.clientId .. \":\" .. self.clientSecret)\r\n    local headers = {\r\n        ['Authorization'] = 'Basic ' .. credentials,\r\n        ['Content-Type'] = 'application/x-www-form-urlencoded',\r\n        ['Accept'] = 'application/json'\r\n    }\r\n\r\n    local body = buildFormBody({\r\n        grant_type = 'refresh_token',\r\n        client_id = self.clientId,\r\n        client_secret = self.clientSecret,\r\n        refresh_token = self.refreshToken\r\n    })\r\n\r\n    self:httpPost(\"/oauth/token\", body, headers, function(response)\r\n        if response.status == 200 then\r\n            local data = json.decode(response.data)\r\n            if data and data.access_token and data.refresh_token then\r\n                self.accessToken = data.access_token\r\n                self.refreshToken = data.refresh_token\r\n                self.refreshCallback(data.refresh_token)\r\n                \r\n                QuickApp:debug(\"Token refreshed successfully. Expires in: \" .. (data.expires_in or \"unknown\"))\r\n                \r\n                -- Schedule next refresh 15 minutes before expiry\r\n                local refreshTime = (data.expires_in or 3600) - 900\r\n                if refreshTime > 0 then\r\n                    self:scheduleTokenRefresh(refreshTime)\r\n                else\r\n                    self:scheduleTokenRefresh(60)\r\n                end\r\n                \r\n                if callback then\r\n                    callback()\r\n                end\r\n            else\r\n                QuickApp:error(\"Token refresh response missing refresh_token and/or access_token\")\r\n                self:scheduleTokenRefresh(300)\r\n            end\r\n        else\r\n            QuickApp:error(\"Failed to refresh token. Status: \" .. response.status .. \" Response: \" .. tostring(response.data))\r\n            self:scheduleTokenRefresh(300)\r\n        end\r\n    end)\r\nend\r\n\r\nfunction SmartThingsClient:scheduleTokenRefresh(refreshInSeconds)\r\n    hub.setTimeout(refreshInSeconds * 1000, function() self:refreshAccessToken() end)\r\nend\r\n\r\nfunction SmartThingsClient:httpGet(endpoint, headers, callback)\r\n    self.http:request(self.baseUrl .. endpoint, {\r\n        options = {\r\n            headers = headers,\r\n            method = \"GET\"\r\n        },\r\n        success = callback,\r\n        error = function(error)\r\n            QuickApp:error(\"HTTP GET error: \" .. error)\r\n        end\r\n    })\r\nend\r\n\r\nfunction SmartThingsClient:httpPost(endpoint, data, headers, callback)\r\n    self.http:request(self.baseUrl .. endpoint, {\r\n        options = {\r\n            headers = headers,\r\n            method = \"POST\",\r\n            data = data\r\n        },\r\n        success = callback,\r\n        error = function(error)\r\n            QuickApp:error(\"HTTP POST error: \" .. error)\r\n        end\r\n    })\r\nend\r\n\r\nfunction buildFormBody(params)\r\n    local formParts = {}\r\n    for key, value in pairs(params) do\r\n        if value and value ~= \"\" then\r\n            table.insert(formParts, urlEncode(key) .. \"=\" .. urlEncode(value))\r\n        end\r\n    end\r\n    return table.concat(formParts, \"&\")\r\nend\r\n\r\nfunction urlEncode(str)\r\n    if str then\r\n        str = string.gsub(str, \"\\n\", \"\\r\\n\")\r\n        str = string.gsub(str, \"([^%w _%%%-%.~])\", function(c)\r\n            return string.format(\"%%%02X\", string.byte(c))\r\n        end)\r\n        str = string.gsub(str, \" \", \"+\")\r\n    end\r\n    return str\r\nend\r\n\r\nfunction base64Encode(data)\r\n    local bC='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\n    return ((data:gsub('.', function(x) \r\n            local r,b='',x:byte() for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end\r\n            return r;\r\n        end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)\r\n        if (#x < 6) then return '' end\r\n        local c=0\r\n        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end\r\n        return bC:sub(c+1,c+1)\r\n        end)..({ '', '==', '=' })[#data%3+1])\r\nend"},{"name":"acDevice","isMain":false,"isOpen":false,"content":"class 'ACDevice' (QuickAppChild)\r\n\r\nACDevice._trace,TRACE = ACDevice.trace,false\r\nfunction ACDevice.trace(...) if TRACE then ACDevice._trace(...) end end\r\n\r\nfunction ACDevice.getUI()\r\n    return json.decode('[{\"components\":[{\"name\":\"statusLabel\",\"style\":{\"weight\":\"1.0\"},\"text\":\"\",\"type\":\"label\",\"visible\":true}],\"style\":{\"weight\":\"1.0\"},\"type\":\"horizontal\"},{\"components\":[{\"eventBinding\":{\"onLongPressDown\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressDown\",\"auto\"]},\"type\":\"deviceAction\"}],\"onLongPressReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressReleased\",\"auto\"]},\"type\":\"deviceAction\"}],\"onReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onReleased\",\"auto\"]},\"type\":\"deviceAction\"}]},\"name\":\"auto\",\"style\":{\"weight\":\"0.20\"},\"text\":\"Auto\",\"type\":\"button\",\"visible\":true},{\"eventBinding\":{\"onLongPressDown\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressDown\",\"low\"]},\"type\":\"deviceAction\"}],\"onLongPressReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressReleased\",\"low\"]},\"type\":\"deviceAction\"}],\"onReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onReleased\",\"low\"]},\"type\":\"deviceAction\"}]},\"name\":\"low\",\"style\":{\"weight\":\"0.20\"},\"text\":\"Low\",\"type\":\"button\",\"visible\":true},{\"eventBinding\":{\"onLongPressDown\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressDown\",\"medium\"]},\"type\":\"deviceAction\"}],\"onLongPressReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressReleased\",\"medium\"]},\"type\":\"deviceAction\"}],\"onReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onReleased\",\"medium\"]},\"type\":\"deviceAction\"}]},\"name\":\"medium\",\"style\":{\"weight\":\"0.20\"},\"text\":\"Med\",\"type\":\"button\",\"visible\":true},{\"eventBinding\":{\"onLongPressDown\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressDown\",\"high\"]},\"type\":\"deviceAction\"}],\"onLongPressReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressReleased\",\"high\"]},\"type\":\"deviceAction\"}],\"onReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onReleased\",\"high\"]},\"type\":\"deviceAction\"}]},\"name\":\"high\",\"style\":{\"weight\":\"0.20\"},\"text\":\"High\",\"type\":\"button\",\"visible\":true},{\"eventBinding\":{\"onLongPressDown\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressDown\",\"turbo\"]},\"type\":\"deviceAction\"}],\"onLongPressReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressReleased\",\"turbo\"]},\"type\":\"deviceAction\"}],\"onReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onReleased\",\"turbo\"]},\"type\":\"deviceAction\"}]},\"name\":\"turbo\",\"style\":{\"weight\":\"0.20\"},\"text\":\"Turbo\",\"type\":\"button\",\"visible\":true}],\"style\":{\"weight\":\"1.0\"},\"type\":\"horizontal\"},{\"components\":[{\"eventBinding\":{\"onLongPressDown\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressDown\",\"windFree\"]},\"type\":\"deviceAction\"}],\"onLongPressReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressReleased\",\"windFree\"]},\"type\":\"deviceAction\"}],\"onReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onReleased\",\"windFree\"]},\"type\":\"deviceAction\"}]},\"name\":\"windFree\",\"style\":{\"weight\":\"0.50\"},\"text\":\"WindFree\",\"type\":\"button\",\"visible\":true},{\"eventBinding\":{\"onLongPressDown\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressDown\",\"speed\"]},\"type\":\"deviceAction\"}],\"onLongPressReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onLongPressReleased\",\"speed\"]},\"type\":\"deviceAction\"}],\"onReleased\":[{\"params\":{\"actionName\":\"UIAction\",\"args\":[\"onReleased\",\"speed\"]},\"type\":\"deviceAction\"}]},\"name\":\"speed\",\"style\":{\"weight\":\"0.50\"},\"text\":\"Speed\",\"type\":\"button\",\"visible\":true}],\"style\":{\"weight\":\"1.0\"},\"type\":\"horizontal\"}]')\r\nend\r\n\r\nfunction ACDevice:__init(device)\r\n    QuickAppChild.__init(self, device)\r\n\r\n    self.deviceId = self:getVariable('deviceId')\r\n    self.pollInterval = self:getVariable('pollInterval')\r\n    self.uiCallbacks = {\r\n        auto = {\r\n            onReleased = \"setFanMode\"\r\n        },\r\n        low = {\r\n            onReleased = \"setFanMode\"\r\n        },\r\n        medium = {\r\n            onReleased = \"setFanMode\"\r\n        },\r\n        high = {\r\n            onReleased = \"setFanMode\"\r\n        },\r\n        turbo = {\r\n            onReleased = \"setFanMode\"\r\n        },\r\n        windFree = {\r\n            onReleased = \"setOptionalMode\"\r\n        },\r\n        speed = {\r\n            onReleased = \"setOptionalMode\"\r\n        }\r\n    }\r\n\r\n    self:updateProperty(\"supportedThermostatModes\", {\"Off\", \"Cool\"})\r\n    self:updateProperty(\"coolingThermostatSetpointCapabilitiesMin\", 16)\r\n    self:updateProperty(\"coolingThermostatSetpointCapabilitiesMax\", 30)\r\n    self:updateProperty(\"coolingThermostatSetpointStep\", { C = 1, F = 1})\r\n    self:updateProperty(\"coolingThermostatSetpoint\", { value= 22, unit= \"C\" })\r\n\r\n    self:debug(\"AC device initialized: \" .. self.name)\r\n\r\n    hub.setTimeout(math.random(10000, 15000), function() self:pollStatus() end)\r\nend\r\n\r\nfunction ACDevice:pollStatus()\r\n    self.parent.client:getDeviceStatus(self.deviceId, function(data) self:updateStatus(data) end)\r\n    hub.setTimeout(self.pollInterval * 1000, function() self:pollStatus() end) -- Set the next poll\r\nend\r\n\r\nfunction ACDevice:updateStatus(data)\r\n    local main = data.components.main\r\n    local switchState = main.switch.switch.value\r\n    local temperature = main.thermostatCoolingSetpoint.coolingSetpoint.value\r\n    local fanMode = main.airConditionerFanMode.fanMode.value\r\n    local mode = main.airConditionerMode.airConditionerMode.value\r\n    local optionalMode = main[\"custom.airConditionerOptionalMode\"].acOptionalMode.value\r\n\r\n    if switchState == 'on' and mode == 'cool' then\r\n        self:updateProperty(\"thermostatMode\", \"Cool\")\r\n        self:displayCustomControls(true)\r\n    elseif switchState == 'off' then\r\n        self:updateProperty(\"thermostatMode\", \"Off\")\r\n        self:displayCustomControls(false)\r\n    else\r\n        self:updateProperty(\"thermostatMode\", \"Other\")\r\n        self:displayCustomControls(false)\r\n    end\r\n\r\n    self:updateProperty(\"acFanMode\", fanMode)\r\n    self:updateProperty(\"acOptionalMode\", optionalMode)\r\n    self:updateProperty(\"coolingThermostatSetpoint\", { value= temperature, unit= \"C\" })\r\n\r\n    self:updateStatusLabel(fanMode, optionalMode)\r\n\r\n    self:trace(self.name .. \" AC is \" .. switchState .. \", Temp: \" .. temperature .. \"°C, Fan: \" .. fanMode .. \", Mode: \" .. mode .. \", Optional mode: \" .. optionalMode)\r\nend\r\n\r\nfunction ACDevice:setThermostatMode(mode)\r\n    if mode == \"Off\" then\r\n        self:updateProperty(\"thermostatMode\", mode)\r\n        self.parent.client:executeCommandsOnDevice(self.deviceId, {\r\n            {\r\n                component = \"main\",\r\n                capability = \"switch\",\r\n                command = \"off\"\r\n            }\r\n        })\r\n        self:displayCustomControls(false)\r\n    elseif mode == \"Cool\" then\r\n        self:updateProperty(\"thermostatMode\", mode)\r\n        self:updateProperty(\"acFanMode\", \"auto\")\r\n        self.parent.client:executeCommandsOnDevice(self.deviceId, {\r\n            {\r\n                component = \"main\",\r\n                capability = \"switch\",\r\n                command = \"on\"\r\n            },\r\n            {\r\n                component = \"main\",\r\n                capability = \"airConditionerMode\",\r\n                command = \"setAirConditionerMode\",\r\n                arguments = {\"cool\"}\r\n            },\r\n            {\r\n                component = \"main\",\r\n                capability = \"airConditionerFanMode\",\r\n                command = \"setFanMode\",\r\n                arguments = {\"auto\"}\r\n            }\r\n        })\r\n        self:displayCustomControls(true)\r\n        self:updateStatusLabel(\"auto\", nil)\r\n    end\r\nend\r\n\r\nfunction ACDevice:setCoolingThermostatSetpoint(value) \r\n    self.parent.client:executeCommandsOnDevice(self.deviceId, {\r\n            {\r\n                component = \"main\",\r\n                capability = \"thermostatCoolingSetpoint\",\r\n                command = \"setCoolingSetpoint\",\r\n                arguments = {value}\r\n            }\r\n        })\r\n    self:updateProperty(\"coolingThermostatSetpoint\", { value= value, unit= \"C\" })\r\nend\r\n\r\nfunction ACDevice:setFanMode(event)\r\n    local fanMode = event.elementName\r\n\r\n    self:updateProperty(\"acFanMode\", fanMode)\r\n    self.parent.client:executeCommandsOnDevice(self.deviceId, {\r\n        {\r\n            component = \"main\",\r\n            capability = \"airConditionerFanMode\",\r\n            command = \"setFanMode\",\r\n            arguments = {fanMode}\r\n        }\r\n    })\r\n    self:updateStatusLabel(fanMode, nil)\r\nend\r\n\r\nfunction ACDevice:setOptionalMode(event)\r\n    local mode = event.elementName\r\n\r\n    if self.properties.acOptionalMode == mode then\r\n        self:updateProperty(\"acFanMode\", \"auto\")\r\n        self:updateProperty(\"acOptionalMode\", \"off\")\r\n        self.parent.client:executeCommandsOnDevice(self.deviceId, {\r\n            {\r\n                component = \"main\",\r\n                capability = \"airConditionerFanMode\",\r\n                command = \"setFanMode\",\r\n                arguments = {\"auto\"}\r\n            },\r\n            {\r\n                component = \"main\",\r\n                capability = \"custom.airConditionerOptionalMode\",\r\n                command = \"setAcOptionalMode\",\r\n                arguments = {\"off\"}\r\n            }\r\n        })\r\n        self:displayFanButtons(true)\r\n        self:updateStatusLabel(\"auto\", \"off\")\r\n    else\r\n        self:updateProperty(\"acOptionalMode\", mode)\r\n        self.parent.client:executeCommandsOnDevice(self.deviceId, {\r\n            {\r\n                component = \"main\",\r\n                capability = \"custom.airConditionerOptionalMode\",\r\n                command = \"setAcOptionalMode\",\r\n                arguments = {mode}\r\n            }\r\n        })\r\n        self:displayFanButtons(false)\r\n        self:updateStatusLabel(nil, mode)\r\n    end\r\nend\r\n\r\nfunction ACDevice:updateStatusLabel(fanMode, optionalMode)\r\n    fanMode = fanMode or self.properties.acFanMode\r\n    optionalMode = optionalMode or self.properties.acOptionalMode\r\n\r\n    if(optionalMode ~= \"off\") then\r\n        self:updateView(\"statusLabel\", \"text\", \"Mode: \" .. tostring(optionalMode))\r\n    else\r\n        self:updateView(\"statusLabel\", \"text\", \"Fan: \" .. tostring(fanMode))\r\n    end\r\nend\r\n\r\nfunction ACDevice:displayFanButtons(visible)\r\n    self:updateView(\"auto\", \"visible\", visible)\r\n    self:updateView(\"low\", \"visible\", visible)\r\n    self:updateView(\"medium\", \"visible\", visible)\r\n    self:updateView(\"high\", \"visible\", visible)\r\n    self:updateView(\"turbo\", \"visible\", visible)\r\nend\r\n\r\nfunction ACDevice:displayCustomControls(visible)\r\n    self:displayFanButtons(visible)\r\n    self:updateView(\"windFree\", \"visible\", visible)\r\n    self:updateView(\"speed\", \"visible\", visible)\r\n    self:updateView(\"statusLabel\", \"visible\", visible)\r\nend\r\n"}]}